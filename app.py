import streamlit as stimport pandas as pdfrom alpha_vantage.timeseries import TimeSeriesimport plotly.graph_objs as goimport requestsimport yfinance as yf st.set_page_config(page_title="Canadian Market Dashboard", layout="wide")st.title("ðŸ“ˆ Canadian Market & Commodities Dashboard")# === Alpha Vantage Setup ===API_KEY = "99VGI0IR5EUTR4CP"ts = TimeSeries(key=API_KEY, output_format='pandas')# === Define TSX Proxy ETF and Major Canadian Stocks ===stocks = {    "iShares S&P/TSX Capped Composite ETF (XIC.TO)": "XIC.TO",    "BMO S&P/TSX Capped Composite Index ETF (ZCN.TO)": "ZCN.TO",    "Shopify (SHOP.TO)": "SHOP.TO",    "Enbridge (ENB.TO)": "ENB.TO",    "Suncor Energy (SU.TO)": "SU.TO",    "Barrick Gold (ABX.TO)": "ABX.TO",    "Canadian Natural (CNQ.TO)": "CNQ.TO"}# === Fetch Data Function ===@st.cache_data(ttl=3600)def get_stock_data(symbol):    try:        data, _ = ts.get_daily(symbol=symbol, outputsize='compact')        data = data.rename(columns={            '1. open': 'Open',            '2. high': 'High',            '3. low': 'Low',            '4. close': 'Close',            '5. volume': 'Volume'        })        data = data.sort_index()        return data    except Exception as e:        st.error(f"Error loading {symbol}: {e}")        return None# === Plotting Function ===def plot_price_chart(df, title):    fig = go.Figure()    fig.add_trace(go.Scatter(x=df.index, y=df['Close'], mode='lines', name='Close Price'))    fig.update_layout(title=title, xaxis_title='Date', yaxis_title='Price (CAD)', height=350)    st.plotly_chart(fig, use_container_width=True)# === TSX Index Proxy Chart ===st.header("TSX Composite Proxy ETF (XIC.TO)")tsx_data = get_stock_data("XIC.TO")if tsx_data is not None and not tsx_data.empty:    plot_price_chart(tsx_data, "TSX Composite Proxy (XIC.TO) - Last 100 Trading Days")else:    st.warning("TSX data not available.")# === Major Canadian Stock Charts ===st.header("Major Canadian Stocks")selected_stock = st.selectbox("Select a stock to view:", list(stocks.keys()))stock_data = get_stock_data(stocks[selected_stock])if stock_data is not None and not stock_data.empty:    plot_price_chart(stock_data, f"{selected_stock} - Last 100 Trading Days")else:    st.warning("Stock data not available.")    # === Commodities Section ===st.header("Key Commodities Prices (Gold, Oil, Natural Gas)")def get_commodity_data_yf(ticker):    try:        df = yf.download(ticker, period="3mo", interval="1d")        df = df.dropna()        latest_close = df['Close'].iloc[-1]        latest_date = df.index[-1].strftime("%Y-%m-%d")        return float(latest_close), latest_date, df    except Exception as e:        st.error(f"Failed to fetch {ticker} data: {e}")        return None, None, Nonedef plot_commodity_chart(df, title):    fig = go.Figure()    fig.add_trace(go.Scatter(        x=df.index,         y=df['Close'].round(2),         mode='lines',         name='Close Price'    ))    fig.update_layout(        title=title,        xaxis_title='Date',        yaxis_title='Price (USD)',        height=300,        xaxis=dict(tickformat="%b %d", tickangle=-45),        margin=dict(t=40, l=30, r=10, b=70)    )    st.plotly_chart(fig, use_container_width=True)# Layoutcol1, col2, col3 = st.columns(3)# Gold (GC=F)with col1:    price, time, df = get_commodity_data_yf("GC=F")    st.subheader("Gold")    if price:        st.metric(label="Gold (USD/oz)", value=f"${price:.2f}")        st.caption(f"Last updated: {time}")    else:        st.warning("Gold data not available.")# Crude Oil (WTI)with col2:    price, time, df_oil = get_commodity_data_yf("CL=F")    st.subheader("Crude Oil (WTI)")    if price:        st.metric(label="WTI Crude (USD/bbl)", value=f"${price:.2f}")        st.caption(f"Last updated: {time}")    else:        st.warning("Oil data not available.")# Natural Gas (Henry Hub)with col3:    price, time, df_gas = get_commodity_data_yf("NG=F")    st.subheader("Natural Gas")    if price:        st.metric(label="Nat Gas (USD/MMBtu)", value=f"${price:.2f}")        st.caption(f"Last updated: {time}")    else:        st.warning("Gas data not available.")# === Commodity Price Charts ===st.markdown("### Commodity Trends - Last 3 Months")col4, col5, col6 = st.columns(3)with col4:    if df is not None:        plot_commodity_chart(df, "Gold - Last 3 Months")with col5:    if df_oil is not None:        plot_commodity_chart(df_oil, "Crude Oil (WTI) - Last 3 Months")with col6:    if df_gas is not None:        plot_commodity_chart(df_gas, "Natural Gas - Last 3 Months")